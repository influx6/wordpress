<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
		>
<channel>
	<title>Comments on: Sometimes It&#8217;s Better To Use A Ruby Hash Than Create A Custom Class</title>
	<atom:link href="http://lostechies.com/derickbailey/2011/05/25/sometimes-its-better-to-use-a-ruby-hash-than-create-a-custom-class/feed/" rel="self" type="application/rss+xml" />
	<link>http://lostechies.com/derickbailey/2011/05/25/sometimes-its-better-to-use-a-ruby-hash-than-create-a-custom-class/</link>
	<description>Better Than Yesterday</description>
	<lastBuildDate>Tue, 15 Jan 2013 14:03:00 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.org/?v=3.4.2</generator>
	<item>
		<title>By: Anonymous</title>
		<link>http://lostechies.com/derickbailey/2011/05/25/sometimes-its-better-to-use-a-ruby-hash-than-create-a-custom-class/#comment-1577</link>
		<dc:creator>Anonymous</dc:creator>
		<pubDate>Mon, 30 May 2011 18:47:00 +0000</pubDate>
		<guid isPermaLink="false">http://lostechies.com/derickbailey/?p=368#comment-1577</guid>
		<description>&gt; 

First order problem is not seeing that the Law of Demeter applies to all graph navigation - including associative arrays .</description>
		<content:encoded><![CDATA[<p>&gt; </p>
<p>First order problem is not seeing that the Law of Demeter applies to all graph navigation &#8211; including associative arrays .</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Derick Bailey</title>
		<link>http://lostechies.com/derickbailey/2011/05/25/sometimes-its-better-to-use-a-ruby-hash-than-create-a-custom-class/#comment-1575</link>
		<dc:creator>Derick Bailey</dc:creator>
		<pubDate>Thu, 26 May 2011 14:41:00 +0000</pubDate>
		<guid isPermaLink="false">http://lostechies.com/derickbailey/?p=368#comment-1575</guid>
		<description>i&#039;m only 4 or 5 chapters into Eloquent Ruby, but i highly recommend it. it&#039;s teaching me a number of things about &quot;the ruby way&quot; that i just haven&#039;t been able to pick up from day to day use.

as for the hash parsing and nil checks... yeah... that&#039;s an ugly problem. as an academic exercise, i applied a maybe monad to a hash to try and solve this problem a while back. i&#039;m not sure if it&#039;s any better than what you showed, but here&#039;s that link: http://lostechies.com/derickbailey/2010/10/11/parsing-a-hash-tree-or-object-graph-using-the-maybe-monad-in-ruby/</description>
		<content:encoded><![CDATA[<p>i&#8217;m only 4 or 5 chapters into Eloquent Ruby, but i highly recommend it. it&#8217;s teaching me a number of things about &#8220;the ruby way&#8221; that i just haven&#8217;t been able to pick up from day to day use.</p>
<p>as for the hash parsing and nil checks&#8230; yeah&#8230; that&#8217;s an ugly problem. as an academic exercise, i applied a maybe monad to a hash to try and solve this problem a while back. i&#8217;m not sure if it&#8217;s any better than what you showed, but here&#8217;s that link: <a href="http://lostechies.com/derickbailey/2010/10/11/parsing-a-hash-tree-or-object-graph-using-the-maybe-monad-in-ruby/" rel="nofollow">http://lostechies.com/derickbailey/2010/10/11/parsing-a-hash-tree-or-object-graph-using-the-maybe-monad-in-ruby/</a></p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Anonymous</title>
		<link>http://lostechies.com/derickbailey/2011/05/25/sometimes-its-better-to-use-a-ruby-hash-than-create-a-custom-class/#comment-1574</link>
		<dc:creator>Anonymous</dc:creator>
		<pubDate>Thu, 26 May 2011 14:34:00 +0000</pubDate>
		<guid isPermaLink="false">http://lostechies.com/derickbailey/?p=368#comment-1574</guid>
		<description>Nice post. 

I usually only start writing classes if hashes cause me pain or I want to encapsulate logic.

One thing I haven&#039;t figured out how to solve elegantly is hashes of hashes. You have to nil? check the hash key before calling the contained hash.  It starts to look ugly. E.g



Do you recommend Eloquent Ruby?
</description>
		<content:encoded><![CDATA[<p>Nice post. </p>
<p>I usually only start writing classes if hashes cause me pain or I want to encapsulate logic.</p>
<p>One thing I haven&#8217;t figured out how to solve elegantly is hashes of hashes. You have to nil? check the hash key before calling the contained hash.  It starts to look ugly. E.g</p>
<p>Do you recommend Eloquent Ruby?</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Remi</title>
		<link>http://lostechies.com/derickbailey/2011/05/25/sometimes-its-better-to-use-a-ruby-hash-than-create-a-custom-class/#comment-1572</link>
		<dc:creator>Remi</dc:creator>
		<pubDate>Thu, 26 May 2011 11:52:00 +0000</pubDate>
		<guid isPermaLink="false">http://lostechies.com/derickbailey/?p=368#comment-1572</guid>
		<description>I agree with your opinion, in general. Coming from Perl background, i&#039;m not always convinced to build custom classes for everything. This is perhaps more peculiar to Java/C# coding patterns, though, Ruby is quite flexible in this aspect. 

A side notice: if you are using &quot;&#124;&#124;=&quot; for caching in your Lipids class (i.e. memoization),
then calculating &quot;value&quot;s in every call is excessive. I would write it this way (or something similar):

@scored_total &#124;&#124;= begin
  value = get_obx_value @obr, &quot;0058-8&quot;
  ScoredValue.new(value, :lipids_total)
end
</description>
		<content:encoded><![CDATA[<p>I agree with your opinion, in general. Coming from Perl background, i&#8217;m not always convinced to build custom classes for everything. This is perhaps more peculiar to Java/C# coding patterns, though, Ruby is quite flexible in this aspect. </p>
<p>A side notice: if you are using &#8220;||=&#8221; for caching in your Lipids class (i.e. memoization),<br />
then calculating &#8220;value&#8221;s in every call is excessive. I would write it this way (or something similar):</p>
<p>@scored_total ||= begin<br />
  value = get_obx_value @obr, &#8221;0058-8&#8243;<br />
  ScoredValue.new(value, :lipids_total)<br />
end</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Derick Bailey</title>
		<link>http://lostechies.com/derickbailey/2011/05/25/sometimes-its-better-to-use-a-ruby-hash-than-create-a-custom-class/#comment-1570</link>
		<dc:creator>Derick Bailey</dc:creator>
		<pubDate>Wed, 25 May 2011 21:14:00 +0000</pubDate>
		<guid isPermaLink="false">http://lostechies.com/derickbailey/?p=368#comment-1570</guid>
		<description>in general, i agree with you about the something_nil &#124;&#124; &quot;N/A&quot; code being on a view model. i don&#039;t always see a need to have a separate domain and view model, though. in this case... well... i&#039;m kind of on the fence and it will probably take me a while longer to really figure out what i think is right for this code base. 

i&#039;m not real sure about any kind of threshold between domain model and view model... it&#039;s such a gray area, really. at some point when I look at a class and see that there&#039;s just too much view specific stuff going on, i&#039;ll split out into a view model vs domain model. but i don&#039;t have any real guidance on how much is too much. it&#039;s a hard problem.

I love the idea of contract / protocol, too... that&#039;s something i&#039;m still trying to learn. i&#039;ve seen it discussed in a handful of places, recently, and I really like the perspective that it gives me - especially considering my SOLID principles background in C#. the idea of protocols has influenced how I approach those principles already, and i&#039;m sure it will continue to have an impact on me as i dig deeper into the idea. :)</description>
		<content:encoded><![CDATA[<p>in general, i agree with you about the something_nil || &#8220;N/A&#8221; code being on a view model. i don&#8217;t always see a need to have a separate domain and view model, though. in this case&#8230; well&#8230; i&#8217;m kind of on the fence and it will probably take me a while longer to really figure out what i think is right for this code base. </p>
<p>i&#8217;m not real sure about any kind of threshold between domain model and view model&#8230; it&#8217;s such a gray area, really. at some point when I look at a class and see that there&#8217;s just too much view specific stuff going on, i&#8217;ll split out into a view model vs domain model. but i don&#8217;t have any real guidance on how much is too much. it&#8217;s a hard problem.</p>
<p>I love the idea of contract / protocol, too&#8230; that&#8217;s something i&#8217;m still trying to learn. i&#8217;ve seen it discussed in a handful of places, recently, and I really like the perspective that it gives me &#8211; especially considering my SOLID principles background in C#. the idea of protocols has influenced how I approach those principles already, and i&#8217;m sure it will continue to have an impact on me as i dig deeper into the idea. :)</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Anonymous</title>
		<link>http://lostechies.com/derickbailey/2011/05/25/sometimes-its-better-to-use-a-ruby-hash-than-create-a-custom-class/#comment-1569</link>
		<dc:creator>Anonymous</dc:creator>
		<pubDate>Wed, 25 May 2011 20:45:00 +0000</pubDate>
		<guid isPermaLink="false">http://lostechies.com/derickbailey/?p=368#comment-1569</guid>
		<description>I see what you meant at the end when dealing with the class specifics, but the first half of the blog post all I could think was that `something_that_can_be_nil &#124;&#124; &quot;N/A&quot;` should be on a view model somewhere.  Right?  As a .NET guy I just know rails via blog posts (lol?) so people tend to put that logic right onto the model in their examples (like you might have a property `something_or_na` that returns `something` or `&quot;NA&quot;`).  In a real rails app I&#039;d be curious if there is a certain threshold at which point you have some kind of &#039;view model&#039; or if your domain model is always capable of being sent to the view layer.  (Maybe this is just a symptom of thinking database = domain, and in Rails your domain models aren&#039;t necessarily ActiveRecord models?)

I do like the closing though :)  I see so many smart programmers passing hashes around that I have to get over the &#039;uneasiness&#039; that might bring from C# (I mean, I can&#039;t just assume its &#039;bad&#039; because the people doing it are much smarter than me).  For me it helps to think everything is a contract / protocol in Ruby so hash vs dto ... its still just a &#039;what do I promise this exposes&#039;.</description>
		<content:encoded><![CDATA[<p>I see what you meant at the end when dealing with the class specifics, but the first half of the blog post all I could think was that `something_that_can_be_nil || &#8220;N/A&#8221;` should be on a view model somewhere.  Right?  As a .NET guy I just know rails via blog posts (lol?) so people tend to put that logic right onto the model in their examples (like you might have a property `something_or_na` that returns `something` or `&#8221;NA&#8221;`).  In a real rails app I&#8217;d be curious if there is a certain threshold at which point you have some kind of &#8216;view model&#8217; or if your domain model is always capable of being sent to the view layer.  (Maybe this is just a symptom of thinking database = domain, and in Rails your domain models aren&#8217;t necessarily ActiveRecord models?)</p>
<p>I do like the closing though :)  I see so many smart programmers passing hashes around that I have to get over the &#8216;uneasiness&#8217; that might bring from C# (I mean, I can&#8217;t just assume its &#8216;bad&#8217; because the people doing it are much smarter than me).  For me it helps to think everything is a contract / protocol in Ruby so hash vs dto &#8230; its still just a &#8216;what do I promise this exposes&#8217;.</p>
]]></content:encoded>
	</item>
</channel>
</rss>

<!-- Performance optimized by W3 Total Cache. Learn more: http://www.w3-edge.com/wordpress-plugins/

Page Caching using disk: enhanced

Served from: lostechies.com @ 2013-01-15 15:06:50 -->